import type { TranslationKeys } from '../types';

export const en: TranslationKeys = {
  common: {
    save: 'Save',
    cancel: 'Cancel',
    loading: 'Loading...',
    success: 'Success',
    error: 'Error',
    close: 'Close',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    yes: 'Yes',
    no: 'No',
    delete: 'Delete',
    edit: 'Edit',
    create: 'Create',
    export: 'Export',
    import: 'Import',
    execute: 'Execute',
    search: 'Search',
    add: 'Add',
    remove: 'Remove',
    clear: 'Clear',
    refresh: 'Refresh',
    thinking: 'Thinking',
    seconds: 's',
    copy: 'Copy',
    copied: 'Copied!',
    viewOutput: 'View Output',
    stop: 'Stop',
    collapse: 'Collapse',
    expand: 'Expand',
    searchFailed: 'Search failed',
    noMatchesFound: 'No matches found',
    commandFailed: 'Command failed',
    commandCompleted: 'Command completed',
    taskInstructions: 'Task Instructions',
    noFilesFound: 'No files found',
    emptyDirectory: 'Empty directory',
    clickToSelect: 'Click to select • Double-click to enter',
    unknownError: 'Unknown error',
    clickExpandToView: 'Click "Expand" to view the full file',
    noMatchesForPattern: 'No matches found for the given pattern.',
  },

  app: {
    title: 'Claudia',
    welcome: 'Welcome to Claudia',
    backToHome: '← Back to Home',
    name: 'Claude Code',
  },

  navigation: {
    ccAgents: 'CC Agents',
    ccProjects: 'CC Projects',
    usageDashboard: 'Usage Dashboard',
    claudemd: 'CLAUDE.md',
    mcp: 'MCP',
    settings: 'Settings',
    about: 'About',
  },

  projects: {
    title: 'CC Projects',
    description: 'Browse your Claude Code sessions',
    newSession: 'New Claude Code session',
    noProjectsFound: 'No projects found in ~/.claude/projects',
    failedToLoad: 'Failed to load projects. Please ensure ~/.claude directory exists.',
    failedToLoadSessions: 'Failed to load sessions for this project.',
    sessions: 'sessions',
    session: 'session',
    firstMessage: 'First message:',
    hasTodo: 'Has todo',
  },

  agents: {
    title: 'CC Agents',
    description: 'Manage your Claude Code agents',
    noAgents: 'No agents yet',
    createFirst: 'Create your first CC Agent to get started',
    createAgent: 'Create CC Agent',
    recentExecutions: 'Recent Executions',
    deleteAgent: 'Delete Agent',
    deleteConfirm: 'Are you sure you want to delete the agent',
    deleteWarning: 'This action cannot be undone and will permanently remove the agent and all its associated data.',
    deleting: 'Deleting...',
    created: 'Agent created successfully',
    updated: 'Agent updated successfully',
    deleted: 'Agent deleted successfully',
    imported: 'Agent imported successfully from GitHub',
    failedToDelete: 'Failed to delete agent',
    runningTitle: 'Running Sessions',
    
    // Additional translations for CCAgents
    import: 'Import',
    fromFile: 'From File',
    fromGitHub: 'From GitHub',
    agents: 'Agents',
    runningSessions: 'Running Sessions',
    execute: 'Execute',
    edit: 'Edit',
    export: 'Export',
    delete: 'Delete',
    previous: 'Previous',
    next: 'Next',
    page: 'Page',
    of: 'of',
    cancel: 'Cancel',
    exportSuccess: 'Agent exported successfully',
    exportFailed: 'Failed to export agent',
    importFromFile: 'Agent imported successfully',
    importFromGitHub: 'Agent imported successfully from GitHub',
    failedToImport: 'Failed to import agent',
    createdAt: 'Created',
    executeTitle: 'Execute agent',
    editTitle: 'Edit agent',
    exportTitle: 'Export agent to .claudia.json',
    deleteTitle: 'Delete agent',
  },

  settings: {
    title: 'Settings',
    description: 'Configure Claude Code preferences',
    saving: 'Saving...',
    saveSettings: 'Save Settings',
    saved: 'Settings saved successfully!',
    failedToSave: 'Failed to save settings',

    tabs: {
      general: 'General',
      permissions: 'Permissions',
      environment: 'Environment',
      advanced: 'Advanced',
    },

    general: {
      title: 'General Settings',
      language: 'Interface Language',
      languageDescription: 'Choose your preferred interface language',
      claudeAttribution: 'Include "Co-authored by Claude"',
      claudeAttributionDescription: 'Add Claude attribution to git commits and pull requests',
      verboseOutput: 'Verbose Output',
      verboseOutputDescription: 'Show full bash and command outputs',
      chatRetention: 'Chat Transcript Retention (days)',
      chatRetentionDescription: 'How long to retain chat transcripts locally (default: 30 days)',
      claudeInstallation: 'Claude Code Installation',
      claudeInstallationDescription: 'Select which Claude Code installation to use',
      binaryPathChanged: '⚠️ Claude binary path has been changed. Remember to save your settings.',
    },

    permissions: {
      title: 'Permission Rules',
      description: 'Control which tools Claude Code can use without manual approval',
      allowRules: 'Allow Rules',
      denyRules: 'Deny Rules',
      addRule: 'Add Rule',
      noAllowRules: 'No allow rules configured. Claude will ask for approval for all tools.',
      noDenyRules: 'No deny rules configured.',
      examples: 'Examples:',
    },

    environment: {
      title: 'Environment Variables',
      description: 'Environment variables applied to every Claude Code session',
      addVariable: 'Add Variable',
      noVariables: 'No environment variables configured.',
      commonVariables: 'Common variables:',
    },

    advanced: {
      title: 'Advanced Settings',
      description: 'Additional configuration options for advanced users',
      apiKeyHelper: 'API Key Helper Script',
      apiKeyHelperDescription: 'Custom script to generate auth values for API requests',
      rawSettings: 'Raw Settings (JSON)',
      rawSettingsDescription: 'This shows the raw JSON that will be saved to ~/.claude/settings.json',
    },
  },

  claude: {
    checking: 'Checking...',
    notFound: 'Claude Code not found',
    selectInstallation: 'Select Claude Installation',
    install: 'Install Claude Code',
    binaryPathSaved: 'Claude binary path saved successfully',
    searchingInstallations: 'Searching for Claude installations...',
    multipleFound: 'Multiple Claude Code installations were found on your system.',
    pleaseSelect: "Please select which one you'd like to use.",
    notFoundInLocations: 'Claude Code was not found in any of the common installation locations.',
    installToContinue: 'Please install Claude Code to continue.',
    searchedLocations: 'Searched locations:',
    installUsing: 'You can install Claude Code using',
  },

  mcp: {
    serverAdded: 'MCP server added successfully!',
    serverRemoved: 'Server removed successfully!',
    importedSuccess: 'Successfully imported',
    importedFailed: 'failed',
  },

  markdown: {
    saved: 'CLAUDE.md saved successfully',
    failedToSave: 'Failed to save CLAUDE.md',
    unsavedChanges: 'You have unsaved changes. Are you sure you want to leave?',
  },

  languages: {
    'zh-CN': 'Chinese (Simplified)',
    'en': 'English',
  },

  // Agent Management
  createAgent: {
    title: 'Create CC Agent',
    editTitle: 'Edit CC Agent',
    backToAgents: 'Back to Agents',
    saving: 'Saving...',
    basicInformation: 'Basic Information',
    agentName: 'Agent Name',
    agentNamePlaceholder: 'e.g., Code Assistant',
    agentNameRequired: 'Agent name is required',
    agentIcon: 'Agent Icon',
    systemPrompt: 'System Prompt',
    systemPromptRequired: 'System prompt is required',
    systemPromptDescription: 'Define the behavior and capabilities of your CC Agent',
    defaultTask: 'Default Task (Optional)',
    defaultTaskPlaceholder: 'e.g., Review this code for security issues',
    defaultTaskDescription: 'This will be used as the default task placeholder when executing the agent',
    model: 'Model',
    icon: 'Icon',
    selectIcon: 'Select an icon',
    sandboxSettings: 'Sandbox Settings',
    sandboxEnabled: 'Enable Sandbox',
    sandboxDescription: 'Run agent in a secure sandbox environment',
    filePermissions: 'File Permissions',
    enableFileRead: 'Enable File Read',
    enableFileWrite: 'Enable File Write',
    networkPermissions: 'Network Permissions',
    enableNetwork: 'Enable Network Access',
    saveAgent: 'Save Agent',
    modelSonnet: 'Claude 4 Sonnet',
    modelSonnetDescription: 'Faster, efficient for most tasks',
    modelOpus: 'Claude 4 Opus',
    modelOpusDescription: 'More capable, better for complex tasks',
    failedToCreate: 'Failed to create agent',
    failedToUpdate: 'Failed to update agent',
    unsavedChanges: 'You have unsaved changes. Are you sure you want to leave?',
  },

  agentExecution: {
    title: 'Agent Execution',
    backToAgents: 'Back to Agents',
    projectPath: 'Project Path',
    selectDirectory: 'Select Directory',
    selectProjectDirectory: 'Select Project Directory',
    task: 'Task',
    taskPlaceholder: 'Enter the task for the agent',
    model: 'Model',
    execute: 'Execute',
    stop: 'Stop',
    executeAgent: 'Execute Agent',
    stopExecution: 'Stop Execution',
    execution: 'Execution',
    executionStarted: 'Execution started',
    executionCompleted: 'Execution completed',
    executionStopped: 'Execution stopped',
    executionError: 'Execution error',
    projectPathRequired: 'Project path is required',
    taskRequired: 'Task is required',
    elapsed: 'Elapsed',
    tokens: 'tokens',
    totalTokens: 'Total Tokens',
    copyOutput: 'Copy Output',
    copyAsJsonl: 'Copy as JSONL',
    copyAsMarkdown: 'Copy as Markdown',
    copySuccess: 'Output copied to clipboard',
    copyFailed: 'Failed to copy output',
    fullscreen: 'View Fullscreen',
    closeFullscreen: 'Close Fullscreen',
    rawJsonl: 'Raw JSONL Output',
    executionLog: 'Execution Log',
    readyToExecute: 'Ready to Execute',
    readyToExecuteDescription: 'Select a project path and enter a task to run the agent',
    initializingAgent: 'Initializing agent...',
    failedToSelectDirectory: 'Failed to select directory',
    failedToExecuteAgent: 'Failed to execute agent',
    agentExecutionFailed: 'Agent execution failed',
    agentExecutionCancelled: 'Agent execution was cancelled',
    executionStoppedByUser: 'Execution stopped by user',
    runningDescription: 'Click back to return to main menu - view in CC Agents > Running Sessions',
    executeDescription: 'Execute CC Agent',
    confirmNavigation: 'An agent is currently running. If you navigate away, the agent will continue running in the background. You can view running sessions in the \'Running Sessions\' tab within CC Agents.\n\nDo you want to continue?',
    agentNameOutput: 'Output',
  },

  usageDashboard: {
    title: 'Usage Dashboard',
    backToHome: 'Back to Home',
    overview: 'Overview',
    sessions: 'Sessions',
    loading: 'Loading usage statistics...',
    failedToLoad: 'Failed to load usage statistics. Please try again.',
    totalCost: 'Total Cost',
    totalTokens: 'Total Tokens',
    inputTokens: 'Input Tokens',
    outputTokens: 'Output Tokens',
    totalSessions: 'Total Sessions',
    dateRange: 'Date Range',
    allTime: 'All Time',
    last7Days: 'Last 7 Days',
    last30Days: 'Last 30 Days',
    costBreakdown: 'Cost Breakdown',
    tokenBreakdown: 'Token Breakdown',
    sessionBreakdown: 'Session Breakdown',
    noData: 'No usage data available',
    projectName: 'Project',
    sessionDate: 'Date',
    duration: 'Duration',
    cost: 'Cost',
    tokens: 'Tokens',
    exportData: 'Export Data',
  },

  mcpManager: {
    title: 'MCP Manager',
    description: 'Manage Model Context Protocol servers',
    backToHome: 'Back to Home',
    servers: 'Servers',
    addServer: 'Add Server',
    importExport: 'Import/Export',
    loading: 'Loading MCP servers...',
    failedToLoad: 'Failed to load MCP servers. Make sure Claude Code is installed.',
    noServers: 'No MCP servers configured',
    serverAdded: 'MCP server added successfully!',
    serverRemoved: 'Server removed successfully!',
    importSuccess: 'Successfully imported',
    importFailed: 'failed',
    serverName: 'Server Name',
    serverCommand: 'Command',
    serverArgs: 'Arguments',
    serverEnv: 'Environment',
    removeServer: 'Remove Server',
    editServer: 'Edit Server',
    testConnection: 'Test Connection',
    jsonFormatExamples: 'JSON Format Examples',
  },

  // Checkpoint Settings
  checkpointSettings: {
    title: 'Checkpoint Settings',
    experimentalFeature: 'Experimental Feature',
    experimentalWarning: 'Checkpointing may affect directory structure or cause data loss. Use with caution.',
    automaticCheckpoints: 'Automatic Checkpoints',
    automaticCheckpointsDescription: 'Automatically create checkpoints based on the selected strategy',
    checkpointStrategy: 'Checkpoint Strategy',
    strategyManual: 'Manual Only',
    strategyPerPrompt: 'After Each Prompt',
    strategyPerToolUse: 'After Tool Use',
    strategySmart: 'Smart (Recommended)',
    strategyManualDescription: 'Checkpoints will only be created manually',
    strategyPerPromptDescription: 'A checkpoint will be created after each user prompt',
    strategyPerToolUseDescription: 'A checkpoint will be created after each tool use',
    strategySmartDescription: 'Checkpoints will be created after destructive operations',
    storageManagement: 'Storage Management',
    totalCheckpoints: 'Total checkpoints:',
    keepRecentCheckpoints: 'Keep Recent Checkpoints',
    cleanUp: 'Clean Up',
    cleanUpDescription: 'Remove old checkpoints, keeping only the most recent',
    removedCheckpoints: 'Removed {count} old checkpoints',
    failedToLoadSettings: 'Failed to load checkpoint settings',
    failedToSaveSettings: 'Failed to save checkpoint settings',
    failedToCleanup: 'Failed to cleanup checkpoints',
    settingsSaved: 'Settings saved successfully',
  },

  // Common UI elements and placeholders
  placeholders: {
    typePromptHere: 'Type your prompt here...',
    searchIcons: 'Search icons...',
    enterUrl: 'Enter URL...',
    exampleText: 'e.g., Before major refactoring',
    searchAgents: 'Search agents...',
    projectPath: '/path/to/your/project',
    alternativeApproach: 'e.g., Alternative approach',
    key: 'KEY',
    value: 'value',
    serverName: 'my-server',
    serverPath: '/path/to/server',
    serverArgs: 'arg1 arg2 arg3',
    sseEndpoint: 'https://example.com/sse-endpoint',
    bashExample: 'e.g., Bash(npm run test:*)',
    curlExample: 'e.g., Bash(curl:*)',
    apiKeyPath: '/path/to/generate_api_key.sh',
    dropImagesHere: 'Drop images here...',
  },

  // Status and states
  status: {
    running: 'Running',
    completed: 'Completed',
    failed: 'Failed',
    pending: 'Pending',
    cancelled: 'Cancelled',
    ready: 'Ready',
    active: 'Active',
    inactive: 'Inactive',
  },

  // Error Boundary
  errorBoundary: {
    title: 'Something went wrong',
    description: 'The application encountered an unexpected error. This might be a temporary issue, please try refreshing the page.',
    tryAgain: 'Try again',
    errorDetails: 'Error Details',
    stackTrace: 'Stack Trace',
  },

  // Webview Preview
  webviewPreview: {
    title: 'Preview',
    webPreview: 'Web preview',
    noUrlProvided: 'No URL provided',
    tryEntering: 'Try entering',
    orAnyOtherUrl: 'or any other URL',
  },

  // Preview Prompt Dialog
  previewPromptDialog: {
    openPreview: 'Open Preview',
    openPreviewQuestion: 'Open Preview?',
    detectedUrlMessage: 'A URL was detected in the terminal output. Would you like to open it in the preview pane?',
    localDevelopmentServer: 'Local Development Server',
    externalUrl: 'External URL',
    previewWillOpen: 'The preview will open in a split view on the right side of the screen.',
  },

  // Session Output Viewer  
  sessionOutput: {
    fullscreen: 'Fullscreen',
    refresh: 'Refresh output',
    sessionOutput: 'Session Output',
    failedToLoad: 'Failed to load session output',
    refreshed: 'Output refreshed',
    failedToRefresh: 'Failed to refresh output',
    waitingForOutput: 'Waiting for output...',
    agentRunningNoOutput: 'Agent is running but no output received yet',
    noOutputAvailable: 'No output available',
  },

  // Agent Run
  agentRun: {
    goBack: 'Go Back',
    openInFullView: 'Open in full view',
    refreshOutput: 'Refresh output',
    failedToLoad: 'Failed to load execution details',
    runNotFound: 'Run not found',
    executionHistory: 'Execution History',
    agentExecution: 'Agent Execution',
    duration: 'Duration',
    tokens: 'tokens',
    cost: 'Cost',
    systemInitialization: 'System Initialization',
    sessionId: 'Session ID',
    model: 'Model',
    workingDirectory: 'Working Directory',
    tools: 'Tools',
    assistant: 'Assistant',
    user: 'User',
    toolResult: 'Tool Result',
    executionResult: 'Execution Result',
    error: 'Error',
    tool: 'Tool',
    tokensUsage: 'Tokens: {input} in, {output} out',
  },

  // Timeline Navigator
  timelineNavigator: {
    checkpoint: 'Checkpoint',
    checkpointName: 'Checkpoint Name',
    checkpointNamePlaceholder: 'e.g., Before major refactoring',
    experimentalFeature: 'Experimental Feature',
    experimentalWarning: 'Checkpointing may affect directory structure or cause data loss. Use with caution.',
    timeline: 'Timeline',
    checkpoints: 'checkpoints',
    failedToLoadTimeline: 'Failed to load timeline',
    current: 'Current',
    noPrompt: 'No prompt',
    tokens: 'tokens',
    files: 'files',
    restoreToCheckpoint: 'Restore to this checkpoint',
    forkFromCheckpoint: 'Fork from this checkpoint',
    compareWithCheckpoint: 'Compare with another checkpoint',
    loadingTimeline: 'Loading timeline...',
    noCheckpointsYet: 'No checkpoints yet',
    createCheckpoint: 'Create Checkpoint',
    createCheckpointTitle: 'Create Checkpoint',
    saveCurrentState: 'Save the current state of your session with an optional description.',
    descriptionOptional: 'Description (optional)',
    cancel: 'Cancel',
    failedToCreateCheckpoint: 'Failed to create checkpoint',
    failedToRestoreCheckpoint: 'Failed to restore checkpoint',
    failedToCompareCheckpoints: 'Failed to compare checkpoints',
    restoreConfirm: 'Restore to checkpoint "{0}"? Current state will be saved as a new checkpoint.',
    autoSaveBeforeRestore: 'Auto-save before restore',
    checkpointComparison: 'Checkpoint Comparison',
    changesBetween: 'Changes between "{0}" and "{1}"',
    modifiedFiles: 'Modified Files',
    addedFiles: 'Added Files',
    deletedFiles: 'Deleted Files',
    close: 'Close',
  },

  // Icon Picker
  iconPicker: {
    selectIcon: 'Select Icon',
    selectedIcon: 'Selected Icon',
    clickToSelect: 'Click an icon to select',
    iconsAvailable: 'icons available',
  },

  // Claude Version Selector
  claudeVersion: {
    downloadProgress: 'Download Progress',
    officialRelease: 'Official Release',
    nightlyBuild: 'Nightly Build',
    developerBuild: 'Developer Build',
    downloadFailed: 'Download failed',
    downloadComplete: 'Download complete',
    verifying: 'Verifying...',
    verified: 'Verified',
    downloadingClaudeCode: 'Downloading Claude Code',
    installingClaudeCode: 'Installing Claude Code',
    installationFailed: 'Installation failed',
    selectChannel: 'Select Channel',
    availableVersions: 'Available Versions',
    installed: 'Installed',
    downloading: 'Downloading',
    selectForInstall: 'Select to install',
    selectInstallation: 'Select Claude Code Installation',
    noInstallationsFound: 'No Claude Code installations found on your system.',
    failedToLoadInstallations: 'Failed to load Claude installations',
    systemPath: 'System PATH',
    homebrew: 'Homebrew',
    system: 'System',
    localBin: 'Local bin',
    claudeLocal: 'Claude local',
    npmGlobal: 'NPM global',
    yarn: 'Yarn',
    bun: 'Bun',
    current: 'Current',
    saving: 'Saving...',
    saveSelection: 'Save Selection',
    validating: 'Validating...',
  },

  // GitHub Agent Browser
  githubAgentBrowser: {
    title: 'Import from GitHub',
    browseAgents: 'Browse Agents',
    searchPlaceholder: 'Search agents...',
    loading: 'Loading...',
    loadFailed: 'Failed to fetch agents from GitHub. Please check your internet connection.',
    noAgentsFound: 'No agents found',
    importAgent: 'Import Agent',
    agentDetails: 'Failed to load agent details',
    author: 'Author',
    stars: 'Stars',
    importInProgress: 'Importing...',
    fetchedFrom: 'Agents are fetched from {url}',
    contributeMessage: 'You can contribute your custom agents to the repository!',
    tryAgain: 'Try Again',
    noAgentsMatchingSearch: 'No agents found matching your search',
    noAgentsAvailable: 'No agents available',
    imported: 'Imported',
    preview: 'Preview',
    agentPreview: 'Agent Preview',
    systemPrompt: 'System Prompt',
    defaultTask: 'Default Task',
    permissions: 'Permissions',
    fileRead: 'File Read',
    fileWrite: 'File Write',
    network: 'Network',
    yes: 'Yes',
    no: 'No',
    version: 'Version',
    exported: 'Exported',
    cancel: 'Cancel',
    importing: 'Importing...',
    alreadyImported: 'Already Imported',
  },

  // Floating Prompt Input  
  floatingPrompt: {
    placeholder: 'Type your prompt here...',
    send: 'Send',
    cancel: 'Cancel',
    keyboardHints: 'Press Enter to send, Shift+Enter for new line',
  },

  // MCP Add Server
  mcpAddServer: {
    title: 'Add MCP Server',
    serverType: 'Server Type',
    typeStdio: 'Standard I/O',
    typeSse: 'SSE (Server-Sent Events)',
    configuration: 'Configuration',
    name: 'Name',
    namePlaceholder: 'my-server',
    nameDescription: 'A unique name to identify this server',
    command: 'Command',
    commandPlaceholder: '/path/to/server',
    commandDescription: 'The command to execute the server',
    args: 'Arguments (optional)',
    argsPlaceholder: 'arg1 arg2 arg3',
    argsDescription: 'Space-separated command arguments',
    sseUrl: 'SSE URL',
    sseUrlPlaceholder: 'https://example.com/sse-endpoint',
    sseUrlDescription: 'The SSE endpoint URL',
    environmentVariables: 'Environment Variables',
    envDescription: 'Configure a new Model Context Protocol server',
    keyPlaceholder: 'KEY',
    valuePlaceholder: 'value',
    addVariable: 'Add Variable',
    cancel: 'Cancel',
    add: 'Add',
    nameRequired: 'Name is required',
    commandRequired: 'Command is required',
    urlRequired: 'URL is required',
    scope: 'Scope',
    scopeLocal: 'Local (this project only)',
    scopeProject: 'Project (shared via .mcp.json)',
    scopeUser: 'User (all projects)',
    exampleCommands: 'Example Commands',
  },

  // NFO Credits
  nfoCredits: {
    title: 'About Claudia',
    builtWith: 'Built with',
    fileABug: 'File a bug',
    version: 'Version',
    byAsterisk: 'A strategic project by Asterisk',
    credits: 'CREDITS',
    poweredBy: 'POWERED BY',
    ultimateCodingAssistant: 'The Ultimate Coding Assistant',
    mcpProtocol: 'Model Context Protocol',
    dependencies: 'DEPENDENCIES',
    runtime: 'RUNTIME',
    uiFramework: 'UI FRAMEWORK',
    styling: 'STYLING',
    animations: 'ANIMATIONS',
    buildTool: 'BUILD TOOL',
    packageManager: 'PACKAGE MANAGER',
    specialThanks: 'SPECIAL THANKS',
    toOpenSource: 'To the open source community',
    toBetaTesters: 'To all the beta testers',
    toEveryone: 'To everyone who believed in this project',
    sharingIsCaring: 'Remember: Sharing is caring!',
    supportDevelopers: 'Support the developers!',
  },

  // Stream Message
  streamMessage: {
    executionFailed: 'Execution Failed',
    executionComplete: 'Execution Complete',
  },

  // Agent Run Output Viewer
  agentRunOutput: {
    failedToLoadOutput: 'Failed to load agent output',
    agentExecutionCompleted: 'Agent execution completed',
    agentExecutionCancelled: 'Agent execution was cancelled',
    outputCopiedAsJsonl: 'Output copied as JSONL',
    outputCopiedAsMarkdown: 'Output copied as Markdown',
    loadingOutput: 'Loading output...',
    noOutputAvailable: 'No output available yet',
    running: 'Running',
    copy: 'Copy',
    copyAsJsonl: 'Copy as JSONL',
    copyAsMarkdown: 'Copy as Markdown',
    openInFullView: 'Open in full view',
    exitFullscreen: 'Exit fullscreen',
    enterFullscreen: 'Enter fullscreen',
    refreshOutput: 'Refresh output',
    exitFullscreenButton: 'Exit Fullscreen',
    copyOutput: 'Copy Output',
    agentExecution: 'Agent Execution:',
    claudeOpus: 'Claude 4 Opus',
    claudeSonnet: 'Claude 4 Sonnet',
  },

  // Claude Code Session
  claudeCodeSession: {
    title: 'Claude Code Session',
    failedToLoadHistory: 'Failed to load session history',
    selectDirectory: 'Select Directory',
    selectProjectDirectory: 'Select Project Directory',
    failedToSelectDirectory: 'Failed to select directory',
    selectProjectFirst: 'Please select a project directory first',
    failedToSendPrompt: 'Failed to send prompt',
    executionCancelledByUser: 'Execution cancelled by user',
    failedToCancelExecution: 'Failed to cancel execution',
    failedToForkCheckpoint: 'Failed to fork checkpoint',
    screenshotCaptured: 'Screenshot captured',
    resumingSession: 'Resuming session',
    interactiveSession: 'Interactive session',
    settings: 'Settings',
    timeline: 'Timeline',
    closePreview: 'Close Preview',
    preview: 'Preview',
    closeBrowserPreview: 'Close the preview pane',
    openBrowserPreview: 'Open a browser preview to test your web applications',
    copyOutput: 'Copy Output',
    copyAsMarkdown: 'Copy as Markdown',
    copyAsJsonl: 'Copy as JSONL',
    loadingSessionHistory: 'Loading session history...',
    initializingClaudeCode: 'Initializing Claude Code...',
    projectDirectory: 'Project Directory',
    project: 'Project',
    date: 'Date',
    systemInitialization: 'System Initialization',
    sessionId: 'Session ID',
    model: 'Model',
    workingDirectory: 'Working Directory',
    tools: 'Tools',
    assistant: 'Assistant',
    user: 'User',
    toolResult: 'Tool Result',
    executionResult: 'Execution Result',
    error: 'Error',
    tool: 'Tool',
    tokensUsage: 'Tokens: {input} in, {output} out',
    forkSession: 'Fork Session',
    forkSessionDescription: 'Create a new session branch from the selected checkpoint.',
    newSessionName: 'New Session Name',
    cancel: 'Cancel',
    createFork: 'Create Fork',
    projectPathPlaceholder: '/path/to/your/project',
    alternativeApproachPlaceholder: 'e.g., Alternative approach',
  },

};